<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.bagStrap.mapper.StudyMapper">
	
	<!-- ||||||||||||||||||||||||||||||||||||||스터디 커뮤니티||||||||||||||||||||||||||||||||||||||||| -->
	
	<select id="searchCodes" parameterType="hashmap" resultType="com.example.bagStrap.model.Item">
		SELECT * 
		FROM TBL_CODE
	</select>
	<!-- 스터디 커뮤니티 카테고리 타입-->
	<select id="selectStuComm" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT * 
		FROM TBL_STU_COMM_BOARD_TYPES
    	ORDER BY BOARD_TYPE_ID
	</select>
	<!-- 스터디 커뮤니티 리스트 -->
	<select id="selectStuCommList" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT *
		FROM TBL_STU_COMM
		ORDER BY CREATED_DATE DESC
		FETCH FIRST 5 ROWS ONLY
	</select>
		<!-- 스터디 컨텐츠 리스트 -->
	<select id="selectStuCommListBoard" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
  	 	SELECT C.*, U.*, T.*,commLikeCnt,cnt,
   		CASE 
        WHEN TO_CHAR(C.CREATED_DATE, 'YYYY-MM-DD') = TO_CHAR(SYSDATE, 'YYYY-MM-DD') 
        THEN TO_CHAR(C.CREATED_DATE, 'HH24:MI:SS')
        ELSE TO_CHAR(C.CREATED_DATE, 'YYYY-MM-DD')
    	END AS CREATEDDATEFORMATTED  
   		FROM TBL_STU_COMM C 
    	LEFT JOIN TBL_USER U ON C.AUTHOR = U.USER_ID
    	INNER JOIN TBL_STU_COMM_BOARD_TYPES T ON T.BOARD_TYPE_ID = C.BOARD_TYPE
    	LEFT JOIN
		(
		SELECT COUNT(*) CNT , POST_ID AS board_id FROM TBL_STU_COMMENTS
		GROUP BY POST_ID
		) CCNT ON C.BOARD_ID = CCNT.board_id
		LEFT JOIN
		(
		select targetId,count(*) AS commLikeCnt from tbl_likes 
		group by targetId
		) CLIKE ON C.BOARD_ID = CLIKE.targetId
    	WHERE 1=1
    <if test="boardTypeId !='' and boardTypeId != null">
        AND (BOARD_TYPE = #{boardTypeId} OR PART = #{boardTypeId} OR FULLVIEW = #{boardTypeId})
    </if>
    <if test="boardSearch == 'all'">
        AND (TITLE LIKE '%' || #{search} || '%' OR CONTENT LIKE '%' || #{search} || '%')      
    </if>
    <if test="boardSearch == 'title'">
        AND TITLE LIKE '%' || #{search} || '%'
    </if>
    <if test="boardSearch == 'author'">
        AND USER_NICKNAME LIKE '%' || #{search} || '%'
    </if>
     <if test="period == '1day'">
        AND C.CREATED_DATE >= SYSDATE - 1
    </if>
    <if test="period == '1week'">
        AND C.CREATED_DATE >= SYSDATE - 7
    </if>
    <if test="period == '1month'">
        AND C.CREATED_DATE >= ADD_MONTHS(SYSDATE, -1)
    </if>
    <if test="period == '6months'">
        AND C.CREATED_DATE >= ADD_MONTHS(SYSDATE, -6)
    </if>
    <if test="period == '1year'">
        AND C.CREATED_DATE >= ADD_MONTHS(SYSDATE, -12)
    </if>
    	ORDER BY C.CREATED_DATE DESC
    	OFFSET #{startIndex} ROWS FETCH FIRST #{outputNumber} ROWS ONLY
	</select>
	
	
	<!-- 페이지 cnt-->
	<select id="countCommList" parameterType="hashmap" resultType="int">       
    SELECT COUNT(*) AS CNT 
    FROM TBL_STU_COMM C 
    LEFT JOIN TBL_USER U ON C.AUTHOR = U.USER_ID
    INNER JOIN TBL_STU_COMM_BOARD_TYPES T ON T.BOARD_TYPE_ID = C.BOARD_TYPE
    WHERE 1=1
    <if test="boardTypeId !='' and boardTypeId != null">
        AND (BOARD_TYPE = #{boardTypeId} OR PART = #{boardTypeId} OR FULLVIEW = #{boardTypeId})
    </if>
    <if test="boardSearch == 'all'">
        AND (TITLE LIKE '%' || #{search} || '%' OR CONTENT LIKE '%' || #{search} || '%')      
    </if>
    <if test="boardSearch == 'title'">
        AND TITLE LIKE '%' || #{search} || '%'
    </if>
    <if test="boardSearch == 'author'">
        AND USER_NICKNAME LIKE '%' || #{search} || '%'
    </if>
     <if test="period == '1day'">
        AND C.CREATED_DATE >= SYSDATE - 1
    </if>
    <if test="period == '1week'">
        AND C.CREATED_DATE >= SYSDATE - 7
    </if>
    <if test="period == '1month'">
        AND C.CREATED_DATE >= ADD_MONTHS(SYSDATE, -1)
    </if>
    <if test="period == '6months'">
        AND C.CREATED_DATE >= ADD_MONTHS(SYSDATE, -6)
    </if>
    <if test="period == '1year'">
        AND C.CREATED_DATE >= ADD_MONTHS(SYSDATE, -12)
    </if>
    
	</select>
	<!-- 내가 쓴 게시글 개수-->
	<select id="countMyCommList" parameterType="hashmap" resultType="int">
		SELECT count(*) AS CNT3 FROM TBL_STU_COMM WHERE AUTHOR = #{userId}
	</select>
	<!-- 내가 쓴 댓글 개수 -->
	<select id="countMycommentList" parameterType="hashmap" resultType="int">
		SELECT count(*) AS CNT2 FROM TBL_STU_COMMENTS WHERE AUTHOR = #{userId}
	</select>
	<!-- 스터디 커뮤니티 게시글 상세보기-->
	<select id="selectCommView" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT *
		FROM TBL_STU_COMM C
		LEFT JOIN TBL_USER U ON C.AUTHOR = U.USER_ID
		INNER JOIN TBL_STU_COMM_BOARD_TYPES T ON T.BOARD_TYPE_ID = C.BOARD_TYPE
		LEFT JOIN (
		    SELECT BF.*, ROW_NUMBER() OVER (PARTITION BY BF.BOARDNO ORDER BY BF.FILECREATEDATE DESC) AS RN
		    FROM TBL_BOARDFILE BF
		) BF ON C.BOARD_ID = BF.BOARDNO AND BF.RN = 1
		LEFT JOIN 
		(
		SELECT targetid,COUNT(*) LIKECNT FROM TBL_Likes
		GROUP BY targetid
		) L ON C.BOARD_ID = L.targetid
		LEFT JOIN (
		SELECT POST_ID,COUNT(*) AS commentCnt FROM TBL_STU_COMMENTS
		GROUP BY POST_ID ) COMC
		ON C.BOARD_ID = COMC.POST_ID
		WHERE C.BOARD_ID = #{boardId}
	</select>
		<!-- 스터디 커뮤니티 게시글 상세보기 댓글 리스트(boardId기준)-->
	<select id="selectViewComment" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT C.*, COM.*, U.*, LC.*, BFILE.*, COM.CONTENT AS COMCONTENTS, 
		       COM.CREATED_DATE AS COMCREATEDAY, COM.UPDATE_DATE AS COMUPDATEDAY
		FROM TBL_STU_COMM C
		INNER JOIN TBL_STU_COMMENTS COM ON C.BOARD_ID = COM.POST_ID
		INNER JOIN TBL_USER U ON U.USER_ID = COM.AUTHOR
		LEFT JOIN (
			SELECT BF.*, ROW_NUMBER() OVER (PARTITION BY BF.BOARDNO ORDER BY BF.FILECREATEDATE DESC) AS RN
			FROM TBL_BOARDFILE BF
		) BFILE ON COM.COMMENT_ID = BFILE.BOARDNO AND BFILE.RN = 1
		LEFT JOIN (
		    SELECT targetid, COUNT(*) LIKECNT 
		    FROM TBL_Likes 
		    GROUP BY targetid
		) LC ON COM.COMMENT_ID = LC.targetid
		WHERE POST_ID = #{boardId}
		ORDER BY COM.CREATED_DATE
	</select>
	<!-- 스터디 커뮤니티 게시글 상세보기 댓글 작성-->
	<insert id="insertViewComment" parameterType="hashmap" useGeneratedKeys="true" keyProperty="COMMENT_ID" keyColumn="COMMENT_ID">
	INSERT 
	INTO TBL_STU_COMMENTS (COMMENT_ID, POST_ID, CONTENT, AUTHOR, CREATED_DATE, UPDATE_DATE, PARENT_COMMENT_ID)
	VALUES (COMMENT_SEQ.NEXTVAL, #{boardId}, #{contents}, #{userId},SYSDATE + (9/24), NULL, NULL)
	</insert>
	<!-- 스터디 커뮤니티 나의 게시글-->
	<select id="selectMyComm" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
	SELECT *
    FROM TBL_STU_COMM C 
    LEFT JOIN TBL_USER U ON C.AUTHOR = U.USER_ID
    INNER JOIN TBL_STU_COMM_BOARD_TYPES T ON T.BOARD_TYPE_ID = C.BOARD_TYPE
    WHERE C.AUTHOR = #{userId}
    ORDER BY C.created_Date DESC
    OFFSET #{startIndex} ROWS FETCH FIRST #{outputNumber} ROWS ONLY
	</select>
	<!-- 스터디 커뮤니티 나의 댓글-->
	<select id="selectMyComment" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
	SELECT COM.* FROM  TBL_STU_COMM C 
    LEFT JOIN TBL_USER U ON C.AUTHOR = U.USER_ID
    INNER JOIN TBL_STU_COMM_BOARD_TYPES T ON T.BOARD_TYPE_ID = C.BOARD_TYPE
    RIGHT JOIN TBL_STU_COMMENTS COM ON C.BOARD_ID = COM.POST_ID
    WHERE COM.AUTHOR = #{userId}
    ORDER BY com.created_Date DESC
    OFFSET #{startIndex} ROWS FETCH FIRST #{outputNumber} ROWS ONLY
	</select>
	<!-- 스터디 커뮤니티 게시글 작성하기 카테고리 불러오기-->
	<select id="selectMyCommCategory" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
	SELECT * FROM tbl_stu_comm_board_types
	WHERE (board_type_id BETWEEN 1001 AND 1999) 
	OR (board_type_id BETWEEN 2001 AND 2999)
	OR (board_type_id BETWEEN 3001 AND 3999)
	OR (board_type_id BETWEEN 4001 AND 4999)
	ORDER BY board_type_id
	</select>
	<!-- 스터디 커뮤니티 게시글작성하기-->
	<insert id="insertComm" parameterType="hashmap" useGeneratedKeys="true" keyProperty="board_Id" keyColumn="board_Id">
	INSERT INTO TBL_STU_COMM 
    (BOARD_ID, BOARD_TYPE, TITLE, CONTENT, AUTHOR, CREATED_DATE, UPDATE_DATE, VIEWS, LIKES) 
    VALUES 
    (SEQ_BOARD_ID.NEXTVAL,#{boardTypeId}, #{title}, #{content}, #{userId}, SYSDATE + (9/24), NULL, 0, 0)
	</insert>
	<!-- 스터디 커뮤니티 게시글 작성하기 이미지 첨부-->
	<insert id="insertBoardFile" parameterType="hashmap" >
		INSERT INTO TBL_BOARDFILE
		VALUES(BOARDFILE_SEQ.NEXTVAL, #{idx},#{fileName},#{fileOrgName},#{filePath},#{fileSize},#{fileExt},'N',SYSDATE + (9/24))
	</insert>
	<!-- 스터디 커뮤니티 게시글 삭제하기-->
	<delete id="deleteBoard" parameterType="hashmap" >
	DELETE FROM TBL_STU_COMM 
	WHERE BOARD_ID = #{boardId}
	</delete>
		<!-- 스터디 커뮤니티 게시글 숨기기-->
	<update id="updateStatusBoard" parameterType="hashmap" useGeneratedKeys="true" keyProperty="BOARD_STATUS" keyColumn="BOARD_STATUS" >
	UPDATE TBL_STU_COMM
		SET BOARD_STATUS = 
			CASE 
				WHEN #{boardstatus} = 'N' THEN 'Y'
				WHEN #{boardstatus} = 'Y' THEN 'N'
				ELSE BOARD_STATUS 
			END
	WHERE BOARD_ID = #{boardId}
	</update>
	<!-- 스터디 커뮤니티 게시글 수정하기..-->
	<update id="updateComm" parameterType="hashmap" useGeneratedKeys="true" keyProperty="board_Id" keyColumn="board_Id">
	UPDATE TBL_STU_COMM
	SET 
	BOARD_TYPE = #{boardTypeId},
	TITLE = #{title},
	CONTENT = #{content},
	UPDATE_DATE = SYSDATE + (9/24)
	WHERE BOARD_ID = #{boardId}
	</update>
	<!-- 스터디 커뮤니티 게시글 댓글 삭제하기-->
	<delete id="deleteBoardComment" parameterType="hashmap" >
	DELETE FROM TBL_STU_COMMENTS 
	WHERE COMMENT_ID = #{commentId}
	</delete>
	<!-- 스터디 커뮤니티 게시글 댓글 숨기기-->
	<update id="updateStatusBoardComment" parameterType="hashmap" useGeneratedKeys="true" keyProperty="COMMENTSTATUS" keyColumn="COMMENTSTATUS" >
	UPDATE TBL_STU_COMMENTS
		SET commentstatus = 
			CASE 
				WHEN #{commentstatus} = 'N' THEN 'Y'
				WHEN #{commentstatus} = 'Y' THEN 'N'
				ELSE commentstatus 
			END
	WHERE COMMENT_ID = #{commentId}
	</update>
	<!-- 스터디 커뮤니티 게시글 좋아요-->
	<insert id="insertCommLike" parameterType="hashmap" >
	INSERT INTO TBL_Likes (likeId, likeUserId, targetId, targetType, likeDate)
	VALUES (seq_likeId.NEXTVAL,#{userId},#{boardId},'게시글', SYSDATE + (9/24))
	</insert>
	<!-- 스터디 커뮤니티 댓글 좋아요-->
	<insert id="insertCommentLike" parameterType="hashmap" >
	INSERT INTO TBL_Likes (likeId, likeUserId, targetId, targetType, likeDate)
	VALUES (seq_likeId.NEXTVAL,#{userId},#{boardId},'댓글', SYSDATE + (9/24))
	</insert>
	<!-- 스터디 커뮤니티 게시글 상세보기 좋아요 중복체크-->
	<select id="selectLikeCheck" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
	SELECT * FROM TBL_LIKES
	WHERE LIKEUSERID = #{userId} AND TARGETID = #{boardId}
	</select>
	<!-- 스터디 커뮤니티 좋아요 삭제 -->
	<delete id="deleteCommentLike" parameterType="hashmap" >
	delete from tbl_likes
	where LIKEUSERID = #{userId} and TARGETID = #{boardId}
	</delete>
	<!-- 스터디 커뮤니티 게시글 조회수-->
	<update id="updateCommViews" parameterType="hashmap" >
	update tbl_stu_comm set views = views+1 
	where board_id = #{boardId}
	</update>
	<!-- 게시글 좋아요 갱신 -->
	<select id="selectgetLikeCount" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
	SELECT COUNT(*) AS likeCnt
	FROM tbl_likes
	WHERE TARGETID = #{boardId}
	GROUP BY TARGETID
	</select>
	<!-- 스터디 커뮤니티 댓글 수정모드-->
	<update id="updateComment" parameterType="hashmap">
	UPDATE TBL_STU_COMMENTS 
	SET UPMODE = 'Y'
	WHERE COMMENT_ID = #{commentId}
	</update>
	<!-- 스터디 커뮤니티 댓글 수정모드 세트..-->
	<update id="updateCommentNO" parameterType="hashmap">
	UPDATE TBL_STU_COMMENTS 
	SET UPMODE = 'N'
	WHERE POST_ID = #{boardId}
	</update>
	<!-- 스터디 커뮤니티 댓글 수정완료처리..-->
	<update id="updateCommentResult" parameterType="hashmap" useGeneratedKeys="true" keyProperty="COMMENT_ID" keyColumn="COMMENT_ID">
	UPDATE TBL_STU_COMMENTS
	SET 
	CONTENT = #{content},
	UPDATE_DATE = SYSDATE + (9/24),
	UPMODE = 'N'
	WHERE COMMENT_ID = #{commentId}
	</update>
	<!-- 스터디 커뮤니티 답글 모드-->
	<update id="updateCommentREY" parameterType="hashmap">
	UPDATE TBL_STU_COMMENTS 
	SET REMODE = 'Y'
	WHERE COMMENT_ID = #{commentId}
	</update>
	<!-- 스터디 커뮤니티 답글 수정모드 세트 -->
	<update id="updateCommentRENO" parameterType="hashmap">
	UPDATE TBL_STU_COMMENTS 
	SET REMODE = 'N'
	WHERE POST_ID = #{boardId}
	</update><!-- 스터디 커뮤니티 답글 수정완료처리..-->
	<update id="updateCommentReResult" parameterType="hashmap" useGeneratedKeys="true" keyProperty="COMMENT_ID" keyColumn="COMMENT_ID">
	INSERT INTO TBL_STU_COMMENTS(COMMENT_ID,POST_ID,CONTENT,AUTHOR,CREATED_DATE,PARENT_COMMENT_ID)
	VALUES(COMMENT_SEQ.NEXTVAL,#{boardId},#{content}, #{userId},SYSDATE + (9/24),#{commentId})
	</update>
	
	<!-- ||||||||||||||||||||||||||||||||||||||스터디 그룹||||||||||||||||||||||||||||||||||||||||| -->
	<!-- 스터디 그룹 만들기(책 불러오기)-->
	<select id="selectStuGroupInsertBoardType" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT * FROM TBL_BOOK 
		WHERE CATEGORY = #{boardTypeId}
	</select>	
	<!-- 스터디 그룹 만들기-->
	<insert id="insertStuGroup" parameterType="hashmap" useGeneratedKeys="true" keyProperty="STUDY_GROUP_ID" keyColumn="STUDY_GROUP_ID" >
	INSERT INTO TBL_STUDY_GROUP (
    STUDY_GROUP_ID,
    STUDY_ADMIN_ID,
    SUBJECT_TYPE_ID,
    STUDY_NAME,
    STARTDATE,
    ENDDATE,
    STUDYTIME,
    AGE,
    ONOFFMODE,
    MAX_PARTICIPANTS,
    GENDERGROUP,
    RELATED_BOOK,
    DESCRIPTION
) VALUES (
    STUDY_GROUP_ID_SEQ.NEXTVAL,                     
    #{userId},          
    #{boardTypeId},                    
    #{studyName},
    TO_DATE(#{startdate}, 'YYYY-MM-DD'), 
    TO_DATE(#{enddate}, 'YYYY-MM-DD'), 
    TO_DATE(#{studytime}, 'HH24:MI'),
    #{age},                
    #{onOffMode},             
    #{maxParticipants},                 
    #{genderGroup},                    
    #{relatedBook},                 
    #{description}
)
	</insert>
	<!-- 스터디 그룹 리스트-->
	<select id="selectStuGroupListSidebar" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		 select TSG.*,TSCBT.*,tb.*,applyY,applyN,TO_CHAR(STARTDATE,'YYYY-MM-DD') AS STGSTARTDATE, TO_CHAR(ENDDATE,'YYYY-MM-DD') AS STGENDDATE, TO_CHAR(STUDYTIME,'HH24:MI') AS STGSTUDYTIME from TBL_STUDY_GROUP TSG
		LEFT JOIN TBL_STU_COMM_BOARD_TYPES TSCBT ON TSG.SUBJECT_TYPE_ID = TSCBT.BOARD_TYPE_ID
        LEFT JOIN TBL_BOARDFILE TB ON TSG.STUDY_GROUP_ID = tb.boardno
        LEFT JOIN 
        (
        SELECT study_group_id,count(CASE WHEN fetchapplstatus ='Y' THEN 1 END ) AS applyY,count(CASE WHEN fetchapplstatus ='N' THEN 1 END ) AS applyN
        FROM tbl_study_group TSG
        INNER JOIN tbl_study_application TSA ON TSA.FETCHAPPSTUDYID = TSG.STUDY_GROUP_ID
        group by study_group_id
        ) TCNT ON TSG.STUDY_GROUP_ID = TCNT.STUDY_GROUP_ID
        WHERE 1=1
	     <!-- 연령 필터 -->
	    <if test="age != null and age != ''">
	        AND (age LIKE '%' || #{age} || '%' )
	    </if>
	    
	    <!-- 온라인/오프라인 필터 -->
	    <if test="onOffMode != null and onOffMode != ''">
	        AND (onOffMode LIKE '%' || #{onOffMode} || '%' )
	    </if>
	    
	    <!-- 과목 필터 -->
	    <if test="subjectTypeId != null and subjectTypeId != ''">
	        AND (SUBJECT_TYPE_ID LIKE '%' || #{subjectTypeId} || '%' )
	    </if>
	    
	    <!-- 성별 그룹 필터 -->
	    <if test="genderGroup != null and genderGroup != ''">
	        AND (genderGroup LIKE '%' || #{genderGroup} || '%' )
	    </if>
	    
	    <!-- 시작 날짜 필터 -->
	    <if test="startDate != null and startDate != ''">
	        AND (ENDDATE > TO_DATE(#{startDate}, 'YYYY-MM-DD'))
	    </if>
	    <!-- 사람 범위 필터 -->
	   <if test="participants != null and participants != ''">
   		   AND (TO_NUMBER(#{participants}) >= MAX_PARTICIPANTS)
	   </if>
		<if test="startTime != null and startTime != ''">
		    AND TO_CHAR(STUDYTIME, 'HH24:MI') >= #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
		    AND #{endTime} >= TO_CHAR(STUDYTIME, 'HH24:MI')
		</if>
		<if test="search != null and search != ''">
		    AND (DESCRIPTION LIKE '%' || #{search} || '%' OR STUDY_NAME LIKE '%' || #{search} || '%')
		</if>
		OFFSET #{startIndex} ROWS FETCH FIRST #{outputNumber} ROWS ONLY
	</select>	
	<!-- 스터디 그룹 리스트 개수-->
	<select id="selectStuGroupListSidebarCnt" parameterType="hashmap" resultType="int">
		select count(*) groupCnt from TBL_STUDY_GROUP TSG
		LEFT JOIN TBL_STU_COMM_BOARD_TYPES TSCBT 
        ON TSG.SUBJECT_TYPE_ID = TSCBT.BOARD_TYPE_ID
        WHERE 1=1
	     <!-- 연령 필터 -->
	    <if test="age != null and age != ''">
	        AND (age LIKE '%' || #{age} || '%' )
	    </if>
	    <!-- 온라인/오프라인 필터 -->
	    <if test="onOffMode != null and onOffMode != ''">
	        AND (onOffMode LIKE '%' || #{onOffMode} || '%' )
	    </if>
	    
	    <!-- 과목 필터 -->
	    <if test="subjectTypeId != null and subjectTypeId != ''">
	        AND (SUBJECT_TYPE_ID LIKE '%' || #{subjectTypeId} || '%' )
	    </if>
	    
	    <!-- 성별 그룹 필터 -->
	    <if test="genderGroup != null and genderGroup != ''">
	        AND (genderGroup LIKE '%' || #{genderGroup} || '%' )
	    </if>
	    
	    <!-- 시작 날짜 필터 -->
	    <if test="startDate != null and startDate != ''">
	        AND (ENDDATE > TO_DATE(#{startDate}, 'YYYY-MM-DD'))
	    </if>
	    <!-- 사람 범위 필터 -->
	   <if test="participants != null and participants != ''">
   		   AND (TO_NUMBER(#{participants}) >= MAX_PARTICIPANTS)
	   </if>
		<if test="startTime != null and startTime != ''">
		    AND TO_CHAR(STUDYTIME, 'HH24:MI') >= #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
		    AND #{endTime} >= TO_CHAR(STUDYTIME, 'HH24:MI')
		</if>
		<if test="search != null and search != ''">
		    AND (DESCRIPTION LIKE '%' || #{search} || '%' OR STUDY_NAME LIKE '%' || #{search} || '%')
		</if>
	</select>			
	<!-- 스터디 그룹 리스트 상세페이지-->
	<select id="selectStuGroupDetail" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
	SELECT TSG.*, TSCBT.*, TB.*, TBOOK.*,applyY,applyN, TBOOK.DESCRIPTION AS TBDESCRIPTION, 
	TO_CHAR(STARTDATE, 'YYYY-MM-DD') AS STGSTARTDATE, 
	TO_CHAR(ENDDATE, 'YYYY-MM-DD') AS STGENDDATE, 
	TO_CHAR(STUDYTIME, 'HH24:MI') AS STGSTUDYTIME,
	applyY, applyN
	FROM TBL_STUDY_GROUP TSG
	LEFT JOIN TBL_STU_COMM_BOARD_TYPES TSCBT ON TSG.SUBJECT_TYPE_ID = TSCBT.BOARD_TYPE_ID
	LEFT JOIN TBL_BOARDFILE TB ON TSG.STUDY_GROUP_ID = TB.boardno
	LEFT JOIN TBL_BOOK TBOOK ON TSG.RELATED_BOOK = TBOOK.BOOK_ID
	LEFT JOIN (
	    SELECT FETCHAPPSTUDYID, 
	           COUNT(CASE WHEN FETCHAPPLSTATUS = 'Y' THEN 1 END) AS applyY, 
	           COUNT(CASE WHEN FETCHAPPLSTATUS = 'N' THEN 1 END) AS applyN
	    FROM TBL_STUDY_APPLICATION
	    GROUP BY FETCHAPPSTUDYID
	) TSA ON TSA.FETCHAPPSTUDYID = TSG.STUDY_GROUP_ID
	where TSG.STUDY_GROUP_ID = #{studyGroupId}
	</select>	
	<!-- 스터디 신청하기 -->
	<insert id="insertStuGroupApply" parameterType="hashmap" >
	INSERT INTO TBL_STUDY_APPLICATION (
    FETCHAPPLICATIONID, FETCHAPPSTUDYID, FETCHAPPUSERID, selfIntro, studyGoal, ADDITIONALQUESTIONS, FETCHAPPLICATION_DATE
	) 
	VALUES (
	    seq_fetchapplicationid.NEXTVAL, 
	    #{studyGroupId},                     
	    #{userId},                     
	    #{selfIntro},   
	    #{studyGoal},                
	    #{additionalQuestions},   
	    SYSDATE + (9/24)               
	)
	</insert>
	<!-- 스터디 방장 자동가입 -->
	<insert id="insertStuGroupKingApply" parameterType="hashmap" >
	INSERT INTO TBL_STUDY_APPLICATION (
    FETCHAPPLICATIONID, FETCHAPPSTUDYID, FETCHAPPUSERID, selfIntro, studyGoal, ADDITIONALQUESTIONS, FETCHAPPLICATION_DATE,STUSTATUS,FETCHAPPLSTATUS
	) 
	VALUES (
	    seq_fetchapplicationid.NEXTVAL, 
	    #{idx},                     
	    #{userId},                     
	    '방장 자동가입',   
	    '방장 자동가입',                
	    '방장 자동가입',
	    SYSDATE + (9/24),               
	    'admin',
	    'Y'
	)
	</insert>
	<!-- 스터디 중복가입 방지-->
	<select id="selectStuGroupSubscription" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		select * from tbl_study_application
		where fetchappstudyid = #{studyGroupId} and fetchappuserid = #{userId}
	</select>	
	<!-- 마이페이지 나의 스터디 목록-->
	<select id="selectStuGroupMyPage" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
			SELECT * FROM tbl_study_application TSA
			INNER JOIN tbl_study_group TSG ON TSA.FETCHAPPSTUDYID = TSG.STUDY_GROUP_ID
			LEFT JOIN TBL_BOARDFILE TB ON TSA.FETCHAPPSTUDYID = TB.BOARDNO
            INNER JOIN 
            (
            SELECT study_group_id,count(CASE WHEN fetchapplstatus ='Y' THEN 1 END ) AS applyY,count(CASE WHEN fetchapplstatus ='N' THEN 1 END ) AS applyN
            FROM tbl_study_group TSG
            INNER JOIN tbl_study_application TSA ON TSA.FETCHAPPSTUDYID = TSG.STUDY_GROUP_ID
            group by study_group_id
            ) TCNT ON TSA.FETCHAPPSTUDYID = TCNT.STUDY_GROUP_ID
			WHERE FETCHAPPUSERID = #{userId}
			ORDER BY STUSTATUS
	</select>	
	<!-- 마이스터디 에서 그룹누르면 나오는 상세페이지 -->
	<!-- 마이스터디 -> 상세페이지 유저 검색-->
	<select id="selectStuGroupUserSearch" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT * FROM TBL_USER TU
    	LEFT JOIN TBL_BOARDFILE TB ON TU.USER_NO = TB.FILENO
		WHERE USER_ID = #{userId}
	</select>
	<!-- 마이스터디 -> 상세페이지 유저 학습목표 가져오기-->
	<select id="selectStuGroupUserApplSearch" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT * FROM tbl_study_application TSA
   		LEFT JOIN tbl_user TU ON TSA.FETCHAPPUSERID = TU.USER_ID
    	WHERE FETCHAPPSTUDYID = #{studyGroupId} AND FETCHAPPUSERID = #{sessionId} 
	</select>
	<select id="selectStuGroupSubscriptionSearch" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		select * from tbl_study_application TSA
        INNER JOIN TBL_USER TU ON TU.USER_ID = TSA.FETCHAPPUSERID
        LEFT JOIN TBL_BOARDFILE TB ON TU.USER_NO = TB.BOARDNO
		where STUSTATUS = 'user' AND fetchappstudyid = #{studyGroupId} 
	</select>	
</mapper>