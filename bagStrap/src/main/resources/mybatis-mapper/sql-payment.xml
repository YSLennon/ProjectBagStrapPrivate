<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.bagStrap.mapper.PaymentMapper">
	<select id="selectMyAddress" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		    SELECT *
	        FROM TBL_ADDRESS
	        WHERE 
	        USER_ID = #{userId} AND SAVEYN = 'Y'
	        ORDER BY DEFAULTYN DESC
	</select>
	<select id="selectAddress" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		  SELECT *
		        FROM TBL_ADDRESS
		        WHERE 
		        USER_ID = #{userId}
 				<if test='checkSave != null'>
 				AND SAVEYN = 'Y'
 		        </if>
	</select>
	<update id="changeDefaultYN" parameterType="hashmap">
			UPDATE TBL_ADDRESS
			SET DEFAULTYN = CASE
            WHEN ADDRESS_NO = #{addressNo} THEN 'Y'
            ELSE 'N'
            END
			WHERE USER_ID = #{userId}
 	</update>
	<update id="updateSaveYN" parameterType="hashmap">
			UPDATE TBL_ADDRESS
			SET SAVEYN = 'N'
			WHERE USER_ID = #{userId} AND ADDRESS_NO = #{addressNo} 
 	</update>
	<update id="updateAddressDefaultToN" parameterType="hashmap">
			UPDATE TBL_ADDRESS
			SET DEFAULTYN = 'N'
			WHERE USER_ID = #{userId}
 	</update>
	<insert id="insertAddress" parameterType="hashmap">
		   INSERT INTO TBL_ADDRESS (
			ADDRESS_NO,
            USER_ID,
            USER_NAME,
            PHONE,
            ADDRESS,
            ADDRESS_DETAIL,
            ZONECODE,
            DEFAULTYN,
            SAVEYN,
            REQCOMMENT,
            ENTRANCE_PASSWORD
        ) VALUES (
			SEQ_DOCKER_ADDRESS.NEXTVAL,
            #{userId},
            #{userName},
            #{phone},
            #{address},
            #{addressDetail},
            #{zonecode},
            #{defaultYN},
            #{saveYN},
             #{reqComment},
             #{entrancePassword}
        )
          <selectKey keyProperty="addressNo" resultType="int" order="AFTER">
		       SELECT SEQ_DOCKER_ADDRESS.CURRVAL  FROM DUAL
		  </selectKey>
        
	</insert>
	
<resultMap id="clobDataResult" type="com.example.bagStrap.model.Order">
    <result property="bookId" column="BOOK_ID"/>
    <result property="title" column="TITLE"/>
    <result property="description" column="DESCRIPTION" jdbcType="VARCHAR" javaType="java.lang.String"/>
    <result property="author" column="AUTHOR"/>
    <result property="publisher" column="PUBLISHER"/>
    <result property="price" column="PRICE"/>
    <result property="image" column="IMAGE"/>
    <result property="quantity" column="QUANTITY"/>
    <result property="category" column="CATEGORY"/>
    <result property="ebook" column="EBOOK"/>
    <result property="createdAt" column="CREATED_AT"/>
    <result property="updatedAt" column="UPDATED_AT"/>
    <result property="discount" column="DISCOUNT"/>
    <result property="orderQuantity" column="ORDER_QUANTITY"/>
</resultMap>

<select id="selectBookList" parameterType="map" resultMap="clobDataResult">
    <foreach item="item" collection="orderList" index="index" separator=" UNION ">
        SELECT B.BOOK_ID, #{item.bookQuantity} AS ORDER_QUANTITY, TITLE, DBMS_LOB.SUBSTR(DESCRIPTION, 1, 4000) AS DESCRIPTION, AUTHOR, PUBLISHER, PRICE, IMAGE, QUANTITY, CATEGORY, EBOOK, CREATED_AT, UPDATED_AT, DISCOUNT
        FROM TBL_BOOK B
        WHERE 
            (BOOK_ID = #{item.bookId} AND QUANTITY >= #{item.bookQuantity}) 
    </foreach>
</select>


	
	<update id="updateBookTable" parameterType="hashmap">
			UPDATE TBL_BOOK
			SET QUANTITY = QUANTITY - CASE
			<foreach item="item" collection="orderList" index="index" separator=" ">
				WHEN BOOK_ID = #{item.bookId} THEN #{item.bookQuantity}
			</foreach>
			END
			WHERE BOOK_ID IN (
			<foreach item="item" collection="orderList" index="index" separator=",">
        		#{item.bookId}
    		</foreach>
 			)
 	</update>
 	<insert id="createOrder" parameterType="hashmap" >
			INSERT INTO TBL_ORDER (ORDER_ID, USER_ID, SHIPPING_ADDRESS, IMP)
			VALUES ( #{orderId}, #{userId}, #{addressNo}, #{imp} )
	</insert>
	<insert id="createOrderItem" parameterType="hashmap" >
			INSERT ALL
			<foreach item="item" collection="orderList" separator=" ">
			INTO TBL_ORDER_ITEM (ORDER_ID, BOOK_ID, QUANTITY, PRICE)
			VALUES ( #{orderId}, #{item.bookId}, #{item.bookQuantity}, #{item.bookPrice} )
			</foreach>
			SELECT * FROM DUAL
	</insert>
 	<delete id="deleteCart" parameterType="hashmap" >
			DELETE FROM TBL_CART
			WHERE USER_ID = #{userId} AND BOOK_ID IN 
			<foreach item="item" collection="orderList" open="(" close=")" separator=",">
			#{item.bookId}
			</foreach>
	</delete>
	<select id="checkRefund" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
				SELECT OI.BOOK_ID, OI.QUANTITY, O.STATUS, RI.STATUS AS REFUND_STATUS ,CASE 
				<foreach item="item" collection="orderList">   
				       WHEN RI.BOOK_ID = #{item.bookId} THEN OI.QUANTITY - RI.QUANTITY - #{item.bookQuantity} 
				</foreach>       
		        ELSE OI.QUANTITY 
				END AS CALC 
				FROM TBL_ORDER O 
				LEFT JOIN TBL_ORDER_ITEM OI ON O.ORDER_ID = OI.ORDER_ID
				LEFT JOIN TBL_REFUND R ON R.ORDER_ID = O.ORDER_ID 
				LEFT JOIN TBL_REFUND_ITEM RI ON R.REFUND_ID = RI.REFUND_ID 
				WHERE O.ORDER_ID = #{orderId}
	</select>
	<insert id="insertRefund" parameterType="hashmap" useGeneratedKeys="true" keyProperty="refundFile" keyColumn="REFUND_FILE">
	  INSERT INTO TBL_REFUND (REFUND_ID, ORDER_ID, REASON, REFUND_FILE)
	  VALUES (#{refundId}, #{orderId}, #{refundReasonContent}, REFUND_FILE_SEQ.NEXTVAL)
	</insert>

	<insert id="insertRefundItem" parameterType="hashmap">
	INSERT ALL
	  <foreach item="item" collection="orderList" >
	    INTO TBL_REFUND_ITEM (REFUND_ID, BOOK_ID, QUANTITY)
	    VALUES (#{refundId}, #{item.bookId}, #{item.bookQuantity})
	  </foreach>
	  SELECT * FROM DUAL
	</insert>
<!--TODO -->
	<select id="selectRefundListCount" parameterType="hashmap" resultType="int">
		    SELECT CEIL(COUNT(*)/#{pageSize})
			FROM TBL_REFUND R
			INNER JOIN TBL_REFUND_ITEM I ON R.REFUND_ID = I.REFUND_ID
			INNER JOIN TBL_ORDER O ON R.ORDER_ID = O.ORDER_ID
			INNER JOIN TBL_ORDER_ITEM OI ON O.ORDER_ID = OI.ORDER_ID AND I.BOOK_ID = OI.BOOK_ID 
			INNER JOIN TBL_BOOK B ON B.BOOK_ID = I.BOOK_ID
			WHERE USER_ID = #{userId}
			AND (#{keyword} IS NULL OR #{keyword} = '' OR B.TITLE LIKE '%' || #{keyword} || '%' OR B.AUTHOR LIKE '%' || #{keyword} || '%') 
			ORDER BY R.CREATED_DATE DESC

	</select>
	<select id="selectRefundList" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
			SELECT R.REFUND_ID, R.CREATED_DATE, O.ORDER_DATE, B.TITLE, B.DESCRIPTION, I.QUANTITY, OI.PRICE, I.STATUS, B.IMAGE, B.AUTHOR,
			 I.REJECT_COMMENT, I.REFUND_REASON, R.UPDATE_DATE AS REFUND_DATE, REFUND_FILE,
			  CASE
				WHEN instr(B.title,'(') = 0 THEN TITLE
				ELSE substr(B.title, 1, instr(B.title,'(')-1)
			END AS SHORT_TITLE
			FROM TBL_REFUND R
			INNER JOIN TBL_REFUND_ITEM I ON R.REFUND_ID = I.REFUND_ID
			INNER JOIN TBL_ORDER O ON R.ORDER_ID = O.ORDER_ID
			INNER JOIN TBL_ORDER_ITEM OI ON O.ORDER_ID = OI.ORDER_ID AND I.BOOK_ID = OI.BOOK_ID 
			INNER JOIN TBL_BOOK B ON B.BOOK_ID = I.BOOK_ID
			WHERE USER_ID = #{userId}
			AND (#{keyword} IS NULL OR #{keyword} = '' OR B.TITLE LIKE '%' || #{keyword} || '%' OR B.AUTHOR LIKE '%' || #{keyword} || '%') 
			ORDER BY R.CREATED_DATE DESC
		    OFFSET (#{currentPage} - 1) * #{pageSize} ROWS FETCH FIRST #{pageSize} ROWS ONLY

	</select>
	 <update id="updateOrderStatus" parameterType="hashmap">
				UPDATE TBL_ORDER
				SET STATUS = '환불 대기'
				WHERE ORDER_ID = #{orderId}
 	</update><update id="updateRefundOrderStatus" parameterType="hashmap">
	    UPDATE TBL_ORDER
		SET STATUS = '환불 처리 완료'
		WHERE ORDER_ID = #{orderId}

	</update>
	<update id="updateRefundStatus" parameterType="hashmap">
	    UPDATE TBL_REFUND_ITEM
	    SET 
	        STATUS = CASE
	            <foreach collection="orderList" item="item" separator=" ">
	                WHEN BOOK_ID = #{item.bookId} THEN #{item.refundStatus, jdbcType=VARCHAR}
	            </foreach>
	        END,
	        REJECT_COMMENT = CASE
	            <foreach collection="orderList" item="item" separator=" ">
	                WHEN BOOK_ID = #{item.bookId} THEN
	                    <choose>
	                        <when test="item.refundStatus != null">#{item.rejectComment, jdbcType=VARCHAR}</when>
	                        <otherwise>''</otherwise>
	                    </choose>
	            </foreach>
	        END
	    WHERE REFUND_ID = #{refundId}
	</update>
	<select id="selectRefundStatus" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
				SELECT OI.BOOK_ID, RI.STATUS AS STATUS, OI.PRICE ,CASE
				<foreach item="item" collection="orderList">   
				 WHEN RI.BOOK_ID = #{item.bookId} THEN #{item.quantity}
 				</foreach>       
				ELSE 1	END AS QUANTITY 
					FROM TBL_REFUND_ITEM RI 
					LEFT JOIN TBL_REFUND R ON R.REFUND_ID = RI.REFUND_ID 
	                LEFT JOIN TBL_ORDER O ON R.ORDER_ID = O.ORDER_ID 
	                LEFT JOIN TBL_ORDER_ITEM OI ON O.ORDER_ID = OI.ORDER_ID
					WHERE R.REFUND_ID = #{refundId} AND RI.STATUS = '승인됨'
	</select>
	<select id="selectOrderComplete" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
				SELECT O.ORDER_ID, TO_CHAR(O.ORDER_DATE, 'YYYY-MM-DD') AS ORDER_DATE, O.STATUS, ARRIVED_DATE, B.TITLE, OI.PRICE, OI.QUANTITY, B.IMAGE, B.CATEGORY, B.BOOK_ID
				FROM
				    (SELECT *
				     FROM
				        (SELECT *
				         FROM TBL_ORDER 
				         ORDER BY ORDER_DATE DESC)
				         WHERE ROWNUM = 1) O 
				INNER JOIN TBL_ORDER_ITEM OI ON O.ORDER_ID = OI.ORDER_ID
				INNER JOIN TBL_BOOK B ON B.BOOK_ID = OI.BOOK_ID
				where user_id = #{userId}
	</select>
	<select id="selectOrderCompleteStudy" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
				SELECT * 
				FROM
				    (SELECT *
				    FROM TBL_STUDY_GROUP G
			        INNER JOIN TBL_BOARDFILE F ON G.STUDY_GROUP_ID = F.BOARDNO
				    WHERE
				    SUBJECT_TYPE_ID IN  
    				<foreach item="item" collection="categories" open="(" close=")" separator=", ">   
				    	#{item}
     				</foreach>       
				    ORDER BY STARTDATE DESC)
				WHERE 4 > ROWNUM
				
	</select>
	
	
	
	
	
	
	
	
	
</mapper>