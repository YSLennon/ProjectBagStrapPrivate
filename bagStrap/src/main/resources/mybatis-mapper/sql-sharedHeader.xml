<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.bagStrap.mapper.SharedHeaderMapper">
	
	<select id="searchItem" parameterType="hashmap" resultType="com.example.bagStrap.model.Item">
		SELECT * FROM TBL_ITEM
		INNER JOIN TBL_CODE ON CODE = CATEGORY1
		<if test="selectedCodes.size() != 0">
			WHERE CODE IN 
			<foreach collection="selectedCodes" item="item" open="(" close=")" separator=",">
			#{item}
			</foreach>
		</if>
	</select>
	<select id="searchCodes" parameterType="hashmap" resultType="com.example.bagStrap.model.Item">
		SELECT * FROM TBL_CODE
	</select>
	
	<select id="selectOrderYear" parameterType="hashmap" resultType="Integer">
		SELECT DISTINCT TO_CHAR(ORDER_DATE, 'YYYY') AS YEAR
		FROM TBL_ORDER O
		WHERE USER_ID = #{userId}
		ORDER BY YEAR DESC	
	</select>

	<select id="selectOrderListCount" parameterType="hashmap" resultType="int">
	    SELECT CEIL(COUNT(*)/#{pageSize})
		FROM TBL_ORDER O
		INNER JOIN TBL_ORDER_ITEM I ON O.ORDER_ID = I.ORDER_ID
		INNER JOIN TBL_BOOK B ON I.BOOK_ID= B.BOOK_ID
        LEFT JOIN TBL_REVIEW RE ON I.BOOK_ID = RE.BOOK_ID AND O.USER_ID = RE.USER_ID
		WHERE O.USER_ID = #{userId} and TO_CHAR(ORDER_DATE, 'YYYY') LIKE '%'|| #{year} || '%' 
		 AND TITLE LIKE '%'|| #{keyword} || '%'
		ORDER BY ORDER_DATE DESC
	</select>
	<select id="selectOrderList" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		SELECT RE.RATING, O.ORDER_ID, TO_CHAR(ORDER_DATE, 'YYYY. MM. DD ') AS ORDERDATE_YEAR,TO_CHAR(ARRIVED_DATE, 'MM/DD DAY ') AS ARRIVEDDATE_DAY, O.STATUS, 
		I.BOOK_ID, IMAGE, TITLE, I.PRICE, I.QUANTITY, IMP, substr(B.title, 1, instr(B.title,'(')-1) AS SHORT_TITLE
		FROM TBL_ORDER O
		INNER JOIN TBL_ORDER_ITEM I ON O.ORDER_ID = I.ORDER_ID
		INNER JOIN TBL_BOOK B ON I.BOOK_ID= B.BOOK_ID
        LEFT JOIN TBL_REVIEW RE ON I.BOOK_ID = RE.BOOK_ID AND O.USER_ID = RE.USER_ID
		WHERE O.USER_ID = #{userId} AND TO_CHAR(ORDER_DATE, 'YYYY') LIKE '%'|| #{year} || '%'
		 AND TITLE LIKE '%'|| #{keyword} || '%' 
		ORDER BY ORDER_DATE DESC
		OFFSET #{currentPage}-1 ROWS FETCH FIRST #{pageSize} ROWS ONLY
	</select>
	
	<select id="selectOrderListForRefund" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		SELECT I.*,B.*, USER_ID, SHIPPING_ADDRESS, ARRIVED_DATE 
		FROM TBL_ORDER O
		INNER JOIN TBL_ORDER_ITEM I ON O.ORDER_ID = I.ORDER_ID
		INNER JOIN TBL_BOOK B ON I.BOOK_ID = B.BOOK_ID
		WHERE O.ORDER_ID = #{orderId}
		ORDER BY O.ORDER_DATE DESC	

	</select>
	
	<select id="selectRefundReasonList" resultType="com.example.bagStrap.model.RefundReason">
		SELECT L1.REASON_TEXT,L1.TEXTAREA, L1.FILE_UPLOAD,L1.REASON_ID, L2.REASON_ID , L3.REASON_ID
		FROM TBL_REFUND_REASON_LIST L1
		LEFT JOIN TBL_REFUND_REASON_LIST L2 ON L1.PARENT_REASON_ID = L2.REASON_ID
		LEFT JOIN TBL_REFUND_REASON_LIST L3 ON L2.PARENT_REASON_ID = L3.REASON_ID
		ORDER BY L1.REASON_ID
	</select>
	
	<select id="selectCartList" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		SELECT USER_ID, C.BOOK_ID, B.PRICE, C.QUANTITY, IMAGE, B.TITLE, substr(B.title, 1, instr(B.title,'(')-1) AS SHORT_TITLE ,
	    CASE 
			WHEN 100 >= LENGTH(B.DESCRIPTION) THEN TO_CHAR(B.DESCRIPTION)
			ELSE TO_CHAR(SUBSTR(B.DESCRIPTION, 1, 100)||SUBSTR(B.DESCRIPTION, 100, INSTR(B.DESCRIPTION,' '))||' ...')
			END AS SHORT_DESCRIPTION  
		FROM TBL_CART C 
		INNER JOIN TBL_BOOK B ON B.BOOK_ID = C.BOOK_ID
		WHERE USER_ID = #{userId}
		ORDER BY C.ADDED_AT DESC

	</select>
	
	<select id="selectAdminOrderListCount" parameterType="hashmap" resultType="int">
	    SELECT CEIL(COUNT(*)/#{pageSize})
		FROM TBL_ORDER O 
		INNER JOIN TBL_ORDER_ITEM OI ON OI.ORDER_ID = O.ORDER_ID
		LEFT JOIN TBL_REFUND R ON R.ORDER_ID = O.ORDER_ID
		LEFT JOIN TBL_REFUND_ITEM I ON R.REFUND_ID = I.REFUND_ID AND I.BOOK_ID = OI.BOOK_ID 
		LEFT JOIN TBL_BOARDFILE F ON R.REFUND_FILE = F.BOARDNO
		INNER JOIN TBL_BOOK B ON B.BOOK_ID = OI.BOOK_ID
		ORDER BY O.ORDER_DATE DESC

	</select>
	<select id="selectAdminOrderList" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		SELECT R.reason, O.IMP,OI.BOOK_ID,i.reject_comment, O.ORDER_ID, R.REFUND_ID,i.refund_reason, R.CREATED_DATE, O.ORDER_DATE, B.TITLE, B.DESCRIPTION, OI.QUANTITY, I.QUANTITY AS REFUND_QUANTITY, OI.PRICE, O.STATUS, I.STATUS AS REFUND_STATUS, B.IMAGE, B.AUTHOR, I.REJECT_COMMENT, I.REFUND_REASON, R.UPDATE_DATE AS REFUND_DATE, R.REFUND_FILE, F.*
		FROM TBL_ORDER O 
		INNER JOIN TBL_ORDER_ITEM OI ON OI.ORDER_ID = O.ORDER_ID
		LEFT JOIN TBL_REFUND R ON R.ORDER_ID = O.ORDER_ID
		LEFT JOIN TBL_REFUND_ITEM I ON R.REFUND_ID = I.REFUND_ID AND I.BOOK_ID = OI.BOOK_ID 
		LEFT JOIN TBL_BOARDFILE F ON R.REFUND_FILE = F.BOARDNO
		INNER JOIN TBL_BOOK B ON B.BOOK_ID = OI.BOOK_ID
		ORDER BY O.ORDER_DATE DESC
		OFFSET #{currentPage}-1 ROWS FETCH FIRST #{pageSize} ROWS ONLY

	</select>
	
	<update id="updateOrderStatus" parameterType="hashmap">
		UPDATE TBL_ORDER
		SET STATUS = '배송 중'
		WHERE ORDER_ID = #{orderId}
	</update>
	
	<update id="updateRefundStatus" parameterType="hashmap">
	    UPDATE TBL_REFUND_ITEM
	    SET STATUS = CASE
	    <foreach collection="orderList" item="item">
	        WHEN BOOK_ID = #{item.bookId} THEN #{item.refundStatus}
	    </foreach>
	    END, REJECT_COMMENT = CASE
	    <foreach collection="orderList" item="item">
	        WHEN BOOK_ID = #{item.bookId} THEN 
	        <if test="item.refundStatus != null">#{item.rejectComment}</if>
	        <if test="item.refundStatus == null">''</if>
	    </foreach>
	    END
	    WHERE REFUND_ID = #{refundId}
	</update>
		
	<!--리뷰 -->
	<insert id="insertMyReview" parameterType="hashmap">
		INSERT INTO TBL_REVIEW (USER_ID, BOOK_ID, RATING, REVIEW_COMMENT)
		VALUES (#{userId}, #{bookId}, #{rating}, #{reviewComment})
	</insert>
	<select id="selectMyReview" parameterType="hashmap" resultType="com.example.bagStrap.model.Order">
		SELECT * 
		FROM TBL_REVIEW
		WHERE BOOK_ID = #{bookId} AND USER_ID = #{userId}
	</select>
	<update id="updateMyReview" parameterType="hashmap">
		UPDATE TBL_REVIEW
		SET 
		 	RATING = #{rating},
		 	REVIEW_COMMENT = #{reviewComment}
	 	WHERE BOOK_ID = #{bookId} AND USER_ID = #{userId}
	</update>
	<delete id="deleteMyReview" parameterType="hashmap">
		DELETE FROM TBL_REVIEW
		WHERE USER_ID = #{userId} AND BOOK_ID = #{bookId}
	</delete>
	<select id="selectStudyGroupForAdminCount" parameterType="hashmap" resultType="Integer">
	    SELECT CEIL(COUNT(*)/#{pageSize})
		FROM
		(SELECT *
		FROM TBL_STUDY_GROUP G
		INNER JOIN TBL_BOARDFILE F ON G.STUDY_GROUP_ID = F.BOARDNO
		ORDER BY STARTDATE DESC)
		ORDER BY GROUPSTATUS
	</select>
	<select id="selectStudyGroupForAdmin" parameterType="hashmap" resultType="com.example.bagStrap.model.StudyComm">
		SELECT * 
		FROM
		(SELECT *
		FROM TBL_STUDY_GROUP G
		INNER JOIN TBL_BOARDFILE F ON G.STUDY_GROUP_ID = F.BOARDNO
		ORDER BY STARTDATE DESC)
		ORDER BY GROUPSTATUS
		OFFSET #{currentPage}-1 ROWS FETCH FIRST #{pageSize} ROWS ONLY
	</select>
	<update id="updateStudyGroupForAdmin" parameterType="hashmap">
		UPDATE TBL_STUDY_GROUP
		SET GROUPSTATUS = 'Y'
		WHERE STUDY_GROUP_ID = ${studyGroupId}
	</update>
	<delete id="deleteStudyGroupForAdmin" parameterType="hashmap">
		DELETE FROM TBL_STUDY_GROUP
		WHERE STUDY_GROUP_ID = ${studyGroupId}
	</delete>
	
	<select id="selectNotificationCount" parameterType="hashmap" resultType="int">
	    SELECT CEIL(COUNT(*)/#{pageSize})
		FROM TBL_NOTIFICATION
		WHERE USER_ID = #{userId} OR STATUS = #{status}

	</select>
	<select id="selectNotification" parameterType="hashmap" resultType="com.example.bagStrap.model.Notification">
		SELECT NOTIFICATION_ID, BOARD_NO, CATEGORY, USER_ID, STATUS, CNT, TO_CHAR(CREATED_DATE, 'YYYY-MM-DD') AS CREATED_DATE, MESSAGE
		FROM TBL_NOTIFICATION
		WHERE USER_ID = #{userId} OR STATUS = #{status}
		OFFSET #{currentPage}-1 ROWS FETCH FIRST #{pageSize} ROWS ONLY

	</select>
</mapper>